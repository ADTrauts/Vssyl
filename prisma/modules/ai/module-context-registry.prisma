// ============================================================================
// MODULE AI CONTEXT REGISTRY
// ============================================================================
// This schema enables the AI system to dynamically understand and work with
// any module (built-in or third-party) through a fast, queryable registry.

// Central registry of all module AI contexts
model ModuleAIContextRegistry {
  id              String   @id @default(uuid())
  moduleId        String   @unique
  moduleName      String
  
  // Module purpose and category (for fast filtering and display)
  purpose         String   // "File storage and management"
  category        String   // "productivity", "communication", "finance", etc.
  
  // Semantic rules for AI matching (INDEXED for ultra-fast keyword search)
  keywords        String[] // ["file", "upload", "download", "document", "pdf"]
  patterns        String[] // ["upload * to drive", "show my files", "find files from *"]
  concepts        String[] // ["storage", "documents", "sharing", "collaboration"]
  
  // Entities this module manages
  // Example: [{ name: "file", pluralName: "files", description: "A digital file" }]
  entities        Json
  
  // Available actions users can take
  // Example: [{ name: "upload", description: "Upload file", permissions: ["drive:write"] }]
  actions         Json
  
  // Context providers - endpoints the AI calls to get live data
  // Example: [{ name: "recentFiles", endpoint: "/api/modules/:id/ai/context/recent", cacheDuration: 900000 }]
  contextProviders Json
  
  // Queryable data - structured queries the AI can make
  // Example: [{ dataType: "fileCount", endpoint: "/api/modules/:id/ai/count", parameters: {...} }]
  queryableData   Json?
  
  // Relationships to other modules (for cross-module insights)
  // Example: [{ module: "chat", type: "integrates", description: "Files shared in chat" }]
  relationships   Json?
  
  // Full AI context definition from manifest (for reference and debugging)
  fullAIContext   Json
  
  // Metadata
  version         String   @default("1.0.0")
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())
  
  // Relationships
  module          Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  // Performance-critical indexes
  @@index([keywords])      // Fast keyword search for AI query matching
  @@index([category])      // Fast category filtering
  @@index([moduleName])    // Fast name lookup
  @@map("module_ai_context_registry")
}

// User-specific AI context cache for performance optimization
model UserAIContextCache {
  id              String   @id @default(uuid())
  userId          String   @unique
  
  // Cached context from all installed modules
  // Stored as complete UserContext object from CrossModuleContextEngine
  cachedContext   Json
  
  // Cache metadata
  lastUpdated     DateTime @default(now())
  expiresAt       DateTime // Auto-refresh after this time (typically 15 minutes)
  version         String   @default("1.0.0")
  
  // Cache statistics
  hitCount        Int      @default(0) // How many times this cache was used
  missCount       Int      @default(0) // How many times cache expired
  
  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])      // Fast expiration checking
  @@map("user_ai_context_cache")
}

// Module AI performance metrics for monitoring and analytics
model ModuleAIPerformanceMetric {
  id              String   @id @default(uuid())
  moduleId        String
  date            DateTime @default(now())
  
  // Query metrics
  totalQueries    Int      @default(0)     // Total AI queries involving this module
  successfulQueries Int    @default(0)     // Successful context fetches
  failedQueries   Int      @default(0)     // Failed context fetches
  averageLatency  Float    @default(0)     // Average response time in ms
  
  // Context metrics
  contextFetchCount Int    @default(0)     // How many times context was fetched
  contextFetchErrors Int   @default(0)     // Context fetch errors
  averageContextSize Float @default(0)     // Average context payload size in KB
  cacheHitRate    Float    @default(0)     // % of queries using cached context
  
  // User satisfaction metrics
  positiveRatings Int      @default(0)     // User thumbs up on AI responses
  negativeRatings Int      @default(0)     // User thumbs down on AI responses
  averageRating   Float    @default(0)     // Average rating (0-10)
  
  // Cost tracking
  estimatedCost   Float    @default(0)     // Estimated AI API costs for this module
  tokenCount      Int      @default(0)     // Total tokens used
  
  // AI learning contribution
  learningEventsGenerated Int @default(0)  // Learning events from this module
  patternsContributed Int     @default(0)  // Global patterns this module contributed to
  
  // Relationships
  module          Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  
  @@unique([moduleId, date])
  @@index([moduleId])
  @@index([date])
  @@map("module_ai_performance_metrics")
}

