# Multi-stage build for production web app with optimized caching
FROM node:20-alpine AS base

# Install pnpm (this layer rarely changes)
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy package files first (these change less frequently)
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY shared/package.json ./shared/
COPY web/package.json ./web/

# Install dependencies (this layer is cached unless package files change)
RUN pnpm install --frozen-lockfile

# Copy Prisma schema (changes less frequently than source code)
COPY prisma/ ./prisma/

# Generate Prisma client (cached unless schema changes)
RUN npx prisma generate

# Copy TypeScript config (rarely changes)
COPY tsconfig.json ./

# Copy shared package source (changes less frequently than web)
COPY shared/ ./shared/

# Build shared package (cached unless shared code changes)
RUN cd shared && pnpm build

# Copy web source (changes most frequently - this comes last)
COPY web/ ./web/

# Build web application (this layer rebuilds when web code changes)
RUN cd web && pnpm build

# Production stage
FROM node:20-alpine AS production

# Install pnpm
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY shared/package.json ./shared/
COPY web/package.json ./web/

# Install production dependencies including Prisma
RUN pnpm install --frozen-lockfile

# Copy built shared package
COPY --from=base /app/shared/dist ./shared/dist
COPY --from=base /app/shared/package.json ./shared/

# Copy built web application
COPY --from=base /app/web/.next/standalone ./
COPY --from=base /app/web/.next/static ./web/.next/static
COPY --from=base /app/web/public ./web/public

# Copy Prisma schema and generate client
COPY prisma/ ./prisma/
RUN npx prisma generate

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S vssyl -u 1001

# Change ownership of the app directory
RUN chown -R vssyl:nodejs /app
USER vssyl

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "web/server.js"]