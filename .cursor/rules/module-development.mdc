# Module Development Standards

## Overview

This document defines the mandatory requirements and best practices for developing modules on the Vssyl platform. **All modules (built-in and third-party) must follow these standards.**

---

## üö® MANDATORY: AI Context Integration

### **Rule: Every Module MUST Have AI Context Integration**

**Why**: Vssyl's AI system needs to understand what each module does and how to interact with it. Without AI context, modules are invisible to the AI and users cannot interact with them naturally through the AI assistant.

**Enforcement**: Modules without proper AI context integration will be:
- Rejected during marketplace review
- Flagged in admin portal
- Unable to integrate with the AI system

---

## üìã AI Context Requirements

### 1. Required Components

Every module **MUST** define a complete `ModuleAIContext` object with ALL of the following:

```typescript
import { ModuleAIContext } from '@vssyl/shared/types/module-ai-context';

const YOUR_MODULE_AI_CONTEXT: ModuleAIContext = {
  // REQUIRED: Clear one-sentence description
  purpose: "What your module does",
  
  // REQUIRED: Module category
  category: "productivity | communication | business | household | health | entertainment | utilities",
  
  // REQUIRED: 10-20 keywords users might say
  keywords: ["keyword1", "keyword2", "synonym1", "synonym2"],
  
  // REQUIRED: 5-10 natural language patterns
  patterns: ["show my *", "find * in module", "what's my *"],
  
  // REQUIRED: Core concepts your module deals with
  concepts: ["concept1", "concept2", "concept3"],
  
  // REQUIRED: Entities your module manages
  entities: [
    {
      name: "item",
      pluralName: "items",
      description: "What this entity represents"
    }
  ],
  
  // REQUIRED: Actions users can perform
  actions: [
    {
      name: "action-name",
      description: "What this action does",
      permissions: ["module:read", "module:write"]
    }
  ],
  
  // REQUIRED: At least one context provider
  contextProviders: [
    {
      name: "providerName",
      endpoint: "/api/your-module/ai/context/provider-name",
      cacheDuration: 900000, // 15 minutes
      description: "What this provider returns"
    }
  ],
  
  // OPTIONAL: Queryable data endpoints
  queryableData?: [...],
  
  // OPTIONAL: Relationships to other modules
  relationships?: [...]
};
```

### 2. Context Provider Endpoints

Every module **MUST** implement at least one context provider endpoint:

#### Requirements:
- **Authentication**: Use `authenticateJWT` middleware
- **Response Time**: < 500ms recommended
- **Data Limit**: Return 10-20 recent/relevant items only
- **Cache Duration**: 5-15 minutes for dynamic data
- **Error Handling**: Graceful error responses with proper status codes

#### Template:

```typescript
// controllers/yourModuleAIContextController.ts

import { Request, Response } from 'express';
import { prisma } from '../lib/prisma';

interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    sub: string;
  };
}

/**
 * GET /api/your-module/ai/context/provider-name
 * 
 * Returns context data for AI queries
 */
export async function getYourContextProvider(
  req: AuthenticatedRequest,
  res: Response
): Promise<void> {
  try {
    const userId = req.user?.id || req.user?.sub;
    
    if (!userId) {
      res.status(401).json({ 
        success: false, 
        message: 'Authentication required' 
      });
      return;
    }
    
    // Fetch your module's data (limit to recent items)
    const yourData = await prisma.yourModel.findMany({
      where: { userId },
      take: 10,
      orderBy: { updatedAt: 'desc' },
      select: {
        id: true,
        name: true,
        // Include only fields AI needs
        relevantField: true
      }
    });
    
    // Format for AI consumption
    const context = {
      items: yourData,
      summary: {
        total: yourData.length,
        // Aggregate info the AI can use
      }
    };
    
    res.json({
      success: true,
      context,
      metadata: {
        provider: 'your-module',
        endpoint: 'provider-name',
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('Error in getYourContextProvider:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to fetch context',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
```

#### Register Route:

```typescript
// routes/yourModule.ts

import { Router } from 'express';
import { getYourContextProvider } from '../controllers/yourModuleAIContextController';
import { authenticateJWT } from '../middleware/auth';

const router: Router = Router();

// Your existing routes...

// AI Context Provider Endpoints
router.get('/ai/context/provider-name', authenticateJWT, getYourContextProvider);

export default router;
```

### 3. Registration

Modules **MUST** register their AI context when installed:

```typescript
// During module installation/activation

import axios from 'axios';

async function registerModuleAIContext(
  moduleId: string,
  moduleName: string,
  aiContext: ModuleAIContext
): Promise<void> {
  try {
    await axios.post(
      `/api/modules/${moduleId}/ai/context`,
      aiContext,
      {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ Module AI context registered');
  } catch (error) {
    console.error('‚ùå Failed to register AI context:', error);
    throw error; // Fail installation if AI context can't be registered
  }
}
```

---

## üéØ Complete Implementation Checklist

Use this checklist for every new module:

### Phase 1: Planning & Design
- [ ] **Define module purpose** - Clear one-sentence description
- [ ] **Identify target users** - Personal, business, or dual-context
- [ ] **List core features** - What the module does
- [ ] **Define entities** - What data the module manages
- [ ] **Define actions** - What users can do

### Phase 2: AI Context Definition
- [ ] **Write purpose statement** - Clear, concise description
- [ ] **Choose category** - productivity | communication | business | etc.
- [ ] **List keywords** (10-20) - What users might say
- [ ] **Create patterns** (5-10) - Natural language templates
- [ ] **Define concepts** - Core ideas the module handles
- [ ] **Document entities** - name, pluralName, description
- [ ] **List actions** - name, description, permissions
- [ ] **Plan context providers** - What data AI needs

### Phase 3: Backend Development
- [ ] **Create database models** - Prisma schema
- [ ] **Implement core API endpoints** - CRUD operations
- [ ] **Add authentication** - Use `authenticateJWT` middleware
- [ ] **Implement context providers** - AI data endpoints
- [ ] **Add permission checks** - Role-based access
- [ ] **Write error handling** - Graceful failures
- [ ] **Add logging** - Use `logger.info/error` from `logger.ts`

### Phase 4: Frontend Development
- [ ] **Create UI components** - Module interface
- [ ] **Implement context switching** - Personal vs. business
- [ ] **Add real-time updates** - WebSocket integration if needed
- [ ] **Implement responsive design** - Mobile & desktop
- [ ] **Add accessibility** - ARIA labels, keyboard navigation

### Phase 5: Integration
- [ ] **Register AI context** - POST to `/api/modules/:id/ai/context`
- [ ] **Test AI detection** - Verify keywords trigger module
- [ ] **Test context providers** - Verify data fetching works
- [ ] **Test end-to-end** - AI queries return correct data
- [ ] **Add to module manifest** - Include AI context in manifest

### Phase 6: Testing & Quality
- [ ] **Unit tests** - Test core functionality
- [ ] **Integration tests** - Test API endpoints
- [ ] **AI context tests** - Test keyword matching
- [ ] **Performance tests** - Context provider speed < 500ms
- [ ] **Security tests** - Permission checks working

### Phase 7: Documentation
- [ ] **Write README** - Installation and usage
- [ ] **API documentation** - All endpoints documented
- [ ] **AI context documentation** - Keywords and patterns explained
- [ ] **User guide** - How to use the module
- [ ] **Developer guide** - How to extend/customize

### Phase 8: Deployment
- [ ] **Version bump** - Semantic versioning
- [ ] **Migration scripts** - Database migrations if needed
- [ ] **Environment variables** - Document required config
- [ ] **Deploy to staging** - Test in staging environment
- [ ] **Deploy to production** - Deploy when ready

---

## üìù Module Manifest Requirements

Every module **MUST** have a complete manifest:

```typescript
{
  "id": "your-module-id",
  "name": "Your Module Name",
  "version": "1.0.0",
  "description": "What your module does",
  "category": "productivity",
  "tags": ["tag1", "tag2"],
  "icon": "path/to/icon.svg",
  "screenshots": ["path/to/screenshot1.png"],
  "developer": {
    "id": "developer-id",
    "name": "Developer Name",
    "email": "dev@example.com"
  },
  "permissions": [
    "module:read",
    "module:write"
  ],
  "dependencies": [
    "required-module-id"
  ],
  "pricing": {
    "tier": "free | premium | enterprise",
    "basePrice": 0,
    "enterprisePrice": 0
  },
  "aiContext": {
    // Your complete ModuleAIContext object here
    "purpose": "...",
    "category": "...",
    "keywords": [...],
    "patterns": [...],
    "concepts": [...],
    "entities": [...],
    "actions": [...],
    "contextProviders": [...]
  },
  "runtime": {
    "entryUrl": "https://your-module.com/index.html",
    "apiVersion": "1.0"
  }
}
```

---

## üé® Best Practices

### Keywords
‚úÖ **Do:**
- Include synonyms and variations (e.g., "task", "todo", "to-do")
- Use lowercase
- Think about how users naturally speak
- Include plural forms (e.g., "task", "tasks")

‚ùå **Don't:**
- Use too generic keywords (e.g., "get", "show")
- Duplicate keywords from other modules
- Use technical jargon users won't say
- Use more than 20 keywords (causes confusion)

### Patterns
‚úÖ **Do:**
- Use `*` as wildcard for flexible matching (e.g., "show my *")
- Cover common question formats
- Think about user intent, not exact phrasing
- Include variations (e.g., "my tasks", "tasks for me", "what tasks")

‚ùå **Don't:**
- Make patterns too specific (limits matching)
- Forget about different ways to ask the same thing
- Use patterns that overlap with other modules

### Context Providers
‚úÖ **Do:**
- Return recent/relevant data only (10-20 items max)
- Use appropriate cache durations (5-15 minutes)
- Include summary/aggregate data
- Handle errors gracefully
- Return structured, predictable JSON

‚ùå **Don't:**
- Return all user data (performance issue)
- Cache for too long if data changes frequently
- Expose sensitive data without permission checks
- Return inconsistent response formats

---

## üîê Security Requirements

### 1. Authentication
**MANDATORY**: All context provider endpoints **MUST** use authentication:

```typescript
router.get('/ai/context/data', authenticateJWT, yourHandler);
```

### 2. Authorization
**MANDATORY**: Verify the user has permission to access the data:

```typescript
// Check if user owns the resource
const resource = await prisma.yourModel.findFirst({
  where: { 
    id: resourceId, 
    userId: userId 
  }
});

if (!resource) {
  return res.status(403).json({ message: 'Access denied' });
}
```

### 3. Data Privacy
**MANDATORY**:
- Only return data the user owns or has permission to see
- Don't include sensitive fields (passwords, tokens, API keys)
- Respect user privacy settings
- Filter business data by businessId/dashboardId
- Never expose other users' data

### 4. Rate Limiting
**RECOMMENDED**: Implement rate limiting for context providers:

```typescript
import rateLimit from 'express-rate-limit';

const contextProviderLimiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 30, // 30 requests per minute
  message: 'Too many requests, please try again later'
});

router.get('/ai/context/data', 
  authenticateJWT, 
  contextProviderLimiter, 
  yourHandler
);
```

---

## üß™ Testing Requirements

### 1. AI Context Testing

Test that your module is detected correctly:

```typescript
// Test module detection
describe('Module AI Context', () => {
  it('should detect module for relevant keywords', async () => {
    const response = await request(app)
      .post('/api/ai/analyze-query')
      .set('Authorization', `Bearer ${token}`)
      .send({ query: 'show my tasks' });
    
    expect(response.body.analysis.matchedModules)
      .toContainEqual(
        expect.objectContaining({
          moduleId: 'your-module-id',
          relevance: 'high'
        })
      );
  });
  
  it('should fetch context from provider', async () => {
    const response = await request(app)
      .get('/api/your-module/ai/context/provider-name')
      .set('Authorization', `Bearer ${token}`);
    
    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('success', true);
    expect(response.body).toHaveProperty('context');
  });
});
```

### 2. Performance Testing

Ensure context providers are fast:

```typescript
it('should respond within 500ms', async () => {
  const startTime = Date.now();
  
  const response = await request(app)
    .get('/api/your-module/ai/context/provider-name')
    .set('Authorization', `Bearer ${token}`);
  
  const duration = Date.now() - startTime;
  
  expect(response.status).toBe(200);
  expect(duration).toBeLessThan(500);
});
```

---

## üìä Monitoring & Analytics

### Monitor Your Module's AI Performance

Check the Admin Portal ‚Üí AI Learning ‚Üí Module Analytics for:

1. **Query Success Rate**: % of queries successfully resolved
2. **Average Response Time**: How fast context providers respond
3. **Cache Hit Rate**: % of context served from cache
4. **User Satisfaction**: Feedback on AI responses
5. **Token Usage**: AI token costs for your module
6. **Error Rate**: Failed context fetches

### Optimization Tips

If metrics are poor:

- **High latency**: Optimize database queries, add indexes
- **Low cache hit rate**: Increase cacheDuration if data doesn't change often
- **Low relevance**: Refine keywords and patterns
- **High error rate**: Improve error handling and logging

---

## üö® Common Mistakes to Avoid

### Mistake 1: Missing AI Context

```typescript
// ‚ùå BAD: No AI context defined
const module = {
  name: "My Module",
  // Missing aiContext!
};

// ‚úÖ GOOD: Complete AI context
const module = {
  name: "My Module",
  aiContext: {
    purpose: "...",
    category: "...",
    keywords: [...],
    // ... complete context
  }
};
```

### Mistake 2: Slow Context Providers

```typescript
// ‚ùå BAD: Fetches too much data
const allData = await prisma.yourModel.findMany({ 
  where: { userId } 
});

// ‚úÖ GOOD: Limited and fast
const recentData = await prisma.yourModel.findMany({
  where: { userId },
  take: 10,
  orderBy: { updatedAt: 'desc' },
  select: {
    id: true,
    name: true,
    relevantField: true
  }
});
```

### Mistake 3: Generic Keywords

```typescript
// ‚ùå BAD: Too generic, conflicts with Drive module
keywords: ["file", "document", "storage"]

// ‚úÖ GOOD: Specific to your module
keywords: ["invoice", "receipt", "expense", "bill", "payment"]
```

### Mistake 4: No Error Handling

```typescript
// ‚ùå BAD: Crashes on error
export async function getContext(req: Request, res: Response) {
  const data = await fetchData(); // Can throw!
  res.json({ context: data });
}

// ‚úÖ GOOD: Graceful error handling
export async function getContext(req: Request, res: Response) {
  try {
    const data = await fetchData();
    res.json({ 
      success: true, 
      context: data 
    });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to fetch context' 
    });
  }
}
```

### Mistake 5: Missing Authentication

```typescript
// ‚ùå BAD: No authentication check
router.get('/ai/context/data', getContext);

// ‚úÖ GOOD: Authentication required
router.get('/ai/context/data', authenticateJWT, getContext);
```

---

## üìö Reference Documentation

### Required Reading
1. **Module AI Context Guide**: `docs/MODULE_AI_CONTEXT_GUIDE.md` - Complete implementation guide
2. **System Patterns**: `memory-bank/systemPatterns.md` - Architecture overview
3. **API Documentation**: `memory-bank/apiDocumentation.md` - API reference
4. **Database Context**: `memory-bank/databaseContext.md` - Database schema

### Code Examples
1. **Built-in Module Registration**: `server/src/startup/registerBuiltInModules.ts`
2. **Module AI Context Types**: `shared/src/types/module-ai-context.ts`
3. **Context Engine**: `server/src/ai/context/CrossModuleContextEngine.ts`
4. **Module AI Context Service**: `server/src/ai/services/ModuleAIContextService.ts`

### Testing
1. **Admin Portal**: Navigate to `/admin-portal/ai-learning` to monitor your module
2. **Test Queries**: Use `/api/ai/analyze-query` to test keyword detection
3. **Direct Test**: Call your context provider endpoints directly with curl/Postman

---

## üéì Examples

### Example 1: Simple Note-Taking Module

```typescript
const NOTE_TAKING_AI_CONTEXT: ModuleAIContext = {
  purpose: "Create, organize, and search personal notes and memos",
  category: "productivity",
  keywords: [
    "note", "notes", "memo", "memos", "reminder", "reminders",
    "jot", "write", "scribble", "notepad", "notebook"
  ],
  patterns: [
    "my notes",
    "notes about *",
    "find note *",
    "create note *",
    "recent notes",
    "search notes for *"
  ],
  concepts: [
    "note-taking",
    "personal organization",
    "quick capture",
    "memory aid"
  ],
  entities: [
    {
      name: "note",
      pluralName: "notes",
      description: "A text note or memo"
    }
  ],
  actions: [
    {
      name: "create",
      description: "Create a new note",
      permissions: ["notes:write"]
    },
    {
      name: "search",
      description: "Search notes",
      permissions: ["notes:read"]
    }
  ],
  contextProviders: [
    {
      name: "recentNotes",
      endpoint: "/api/notes/ai/context/recent",
      cacheDuration: 600000, // 10 minutes
      description: "Get user's 10 most recent notes"
    }
  ]
};
```

### Example 2: Project Management Module

```typescript
const PROJECT_MANAGEMENT_AI_CONTEXT: ModuleAIContext = {
  purpose: "Manage projects, tasks, and team collaboration",
  category: "business",
  keywords: [
    "project", "projects", "task", "tasks", "milestone", "milestones",
    "deadline", "deadlines", "sprint", "kanban", "board",
    "team", "assignment", "progress", "status"
  ],
  patterns: [
    "my projects",
    "project status *",
    "tasks for *",
    "what's due *",
    "team progress on *",
    "upcoming deadlines",
    "assign * to *"
  ],
  concepts: [
    "project management",
    "task tracking",
    "team collaboration",
    "deadlines",
    "milestones"
  ],
  entities: [
    {
      name: "project",
      pluralName: "projects",
      description: "A project with goals and tasks"
    },
    {
      name: "task",
      pluralName: "tasks",
      description: "An actionable item"
    }
  ],
  actions: [
    {
      name: "create-project",
      description: "Create a new project",
      permissions: ["projects:create"]
    },
    {
      name: "assign-task",
      description: "Assign a task",
      permissions: ["projects:assign"]
    }
  ],
  contextProviders: [
    {
      name: "activeProjects",
      endpoint: "/api/projects/ai/context/active",
      cacheDuration: 600000,
      description: "Get user's active projects"
    },
    {
      name: "upcomingDeadlines",
      endpoint: "/api/projects/ai/context/deadlines",
      cacheDuration: 300000,
      description: "Get upcoming deadlines"
    }
  ],
  relationships: [
    {
      module: "calendar",
      type: "integrates",
      description: "Deadlines sync with calendar"
    }
  ]
};
```

---

## üÜò Troubleshooting

### Problem: Module not detected in AI queries

**Solutions**:
1. Verify AI context is registered: `GET /api/modules/:id/ai/context`
2. Check keywords match what users actually say
3. Add more pattern variations
4. Test with `/api/ai/analyze-query`

### Problem: Context provider errors

**Solutions**:
1. Verify endpoint URL is correct
2. Check `authenticateJWT` middleware is applied
3. Test endpoint directly with curl
4. Check server logs for errors

### Problem: Slow AI responses

**Solutions**:
1. Reduce data returned by context providers (max 10-20 items)
2. Add database indexes
3. Increase cache duration
4. Optimize queries with `select` to limit fields

---

## ‚úÖ Module Approval Requirements

For marketplace submission, modules must:

1. ‚úÖ **Complete AI context** defined and registered
2. ‚úÖ **Working context providers** responding < 500ms
3. ‚úÖ **Authentication** on all endpoints
4. ‚úÖ **Error handling** for all API endpoints
5. ‚úÖ **Documentation** complete (README, API docs)
6. ‚úÖ **Tests** passing (unit, integration, AI context)
7. ‚úÖ **Security** review passed
8. ‚úÖ **Performance** benchmarks met

**Modules without AI context integration will be rejected.**

---

## üìû Support & Resources

- **Documentation**: `docs/MODULE_AI_CONTEXT_GUIDE.md`
- **API Reference**: `memory-bank/apiDocumentation.md`
- **Examples**: `scripts/register-built-in-modules.ts`
- **Admin Portal**: Monitor module performance at `/admin-portal/ai-learning`

---

**Last Updated**: October 25, 2025  
**Applies To**: All modules (built-in and third-party)  
**Enforcement**: Mandatory for marketplace approval

