# Fast Cloud Build configuration with Docker layer caching only
steps:
  # Step 1: Pull cached images for Docker layer caching
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Pulling cached images for Docker layer caching..."
        docker pull gcr.io/$PROJECT_ID/vssyl-server:latest || echo "No server cache found"
        docker pull gcr.io/$PROJECT_ID/vssyl-web:latest || echo "No web cache found"
        echo "‚úÖ Cache pull completed"
    id: 'pull-cache'

  # Step 2: Build server and web in parallel with Docker layer caching
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-server:latest'
      - '-f'
      - './server/Dockerfile.production'
      - '--build-arg'
      - 'NODE_ENV=production'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/vssyl-server:latest'
      - '.'
    id: 'build-server'
    waitFor: ['pull-cache']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-web:latest'
      - '-f'
      - './web/Dockerfile.production'
      - '--build-arg'
      - 'NODE_ENV=production'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/vssyl-web:latest'
      - '.'
    id: 'build-web'
    waitFor: ['pull-cache']

  # Step 3: Run database migrations (NEW)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîÑ Running Prisma migrations..."
        
        # Install dependencies
        apt-get update && apt-get install -y curl
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        apt-get install -y nodejs
        
        # Install pnpm
        npm install -g pnpm
        
        # Install dependencies and run migration
        cd /workspace
        pnpm install
        
        # Run Prisma migration
        export DATABASE_URL="postgresql://vssyl_user:ArthurGeorge116%21@172.30.0.15:5432/vssyl_production?connection_limit=20&pool_timeout=20"
        pnpm exec prisma migrate deploy
        
        echo "‚úÖ Migrations completed successfully"
    id: 'run-migrations'
    waitFor: ['build-server']

  # Step 3b: Register built-in modules using the server Docker image
  # Note: This step may fail during build due to database connectivity
  # Module registration will be run post-deployment via Cloud Run job
  - name: 'gcr.io/$PROJECT_ID/vssyl-server:latest'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "ü§ñ Registering built-in modules..."
        echo "‚ö†Ô∏è  Note: This may fail during build due to database connectivity"
        echo "   Module registration will complete after deployment"
        
        # Set database URL
        export DATABASE_URL="postgresql://vssyl_user:ArthurGeorge116%21@172.30.0.15:5432/vssyl_production?connection_limit=20&pool_timeout=20"
        
        # Try to run module registration (non-critical, can fail)
        cd /app
        node server/dist/scripts/register-built-in-modules.js || echo "‚ö†Ô∏è  Skipped - will run after deployment"
        
        echo "‚úÖ Build step completed (module registration will run post-deployment)"
    id: 'register-modules'
    waitFor: ['build-server']

  # Step 4: Push images in parallel
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID']
    id: 'push-server'
    waitFor: ['register-modules']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-server:latest']
    id: 'push-server-latest'
    waitFor: ['build-server']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID']
    id: 'push-web'
    waitFor: ['build-web']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-web:latest']
    id: 'push-web-latest'
    waitFor: ['build-web']

  # Step 5: Deploy server (after migrations)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'vssyl-server'
      - '--image'
      - 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '5000'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '10'
      - '--add-cloudsql-instances'
      - 'vssyl-472202:us-central1:vssyl-db-optimized'
      - '--vpc-egress'
      - 'all-traffic'
      - '--network'
      - 'default'
      - '--subnet'
      - 'default'
      - '--set-env-vars'
      - 'NODE_ENV=production,DATABASE_URL=postgresql://vssyl_user:ArthurGeorge116%21@172.30.0.15:5432/vssyl_production?connection_limit=20&pool_timeout=20,DIRECT_URL=postgresql://vssyl_user:ArthurGeorge116%21@172.30.0.15:5432/vssyl_production?connection_limit=20&pool_timeout=20,JWT_SECRET=OhTXx5RiJu1YOzqGta56ZnN9tTap29sVlvOQMUnGGiI=,JWT_REFRESH_SECRET=/NkIB2sn75WZyqsWOmevzv1wgn9zHuFgmi9x8DTmVG4=,FRONTEND_URL=https://vssyl.com,NEXT_PUBLIC_APP_URL=https://vssyl.com,STORAGE_PROVIDER=gcs,GOOGLE_CLOUD_PROJECT_ID=vssyl-472202,GOOGLE_CLOUD_STORAGE_BUCKET=vssyl-storage-472202'  
      - '--set-secrets'
      - 'OPENAI_API_KEY=openai-api-key:latest,ANTHROPIC_API_KEY=anthropic-api-key:latest'
    id: 'deploy-server'
    waitFor: ['push-server', 'push-server-latest', 'register-modules']  # Wait for migrations and module registration!

  # Step 6: Deploy web (in parallel with server)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'vssyl-web'
      - '--image'
      - 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--max-instances'
      - '20'
      - '--set-env-vars'
      - 'NODE_ENV=production,NEXTAUTH_URL=https://vssyl.com,NEXTAUTH_SECRET=OhTXx5RiJu1YOzqGta56ZnN9tTap29sVlvOQMUnGGiI=,NEXT_PUBLIC_API_URL=https://vssyl-server-235369681725.us-central1.run.app,NEXT_PUBLIC_API_BASE_URL=https://vssyl-server-235369681725.us-central1.run.app,NEXT_PUBLIC_APP_URL=https://vssyl.com,BACKEND_URL=https://vssyl-server-235369681725.us-central1.run.app'                   
    id: 'deploy-web'
    waitFor: ['push-web', 'push-web-latest']

# Store images in Google Container Registry
images:
  - 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/vssyl-server:latest'
  - 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/vssyl-web:latest'

# Build options optimized for speed
options:
  machineType: 'E2_HIGHCPU_8'  # CRITICAL: Use fast machine
  diskSizeGb: '100'
  logging: CLOUD_LOGGING_ONLY
  # Enable Docker buildkit for better caching
  env:
    - 'DOCKER_BUILDKIT=1'

# Timeout (should be much faster now)
timeout: '1800s'