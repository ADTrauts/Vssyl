# Enhanced Cloud Build configuration with comprehensive caching
steps:
  # Step 1: Pull cached images for Docker layer caching
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔍 Pulling cached images for Docker layer caching..."
        docker pull gcr.io/$PROJECT_ID/vssyl-server:latest || echo "No server cache found"
        docker pull gcr.io/$PROJECT_ID/vssyl-web:latest || echo "No web cache found"
        echo "✅ Cache pull completed"
    id: 'pull-cache'

  # Step 2: Restore dependency cache from Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔍 Checking for cached dependencies..."
        
        # Create cache directories
        mkdir -p /workspace/.cache/pnpm
        mkdir -p /workspace/.cache/node_modules
        
        # Try to restore pnpm cache
        gsutil -m cp -r gs://$PROJECT_ID-build-cache/pnpm-cache/* /workspace/.cache/pnpm/ 2>/dev/null || echo "No pnpm cache found"
        
        # Try to restore node_modules cache
        gsutil -m cp -r gs://$PROJECT_ID-build-cache/node_modules/* /workspace/.cache/node_modules/ 2>/dev/null || echo "No node_modules cache found"
        
        echo "✅ Dependency cache restoration completed"
    id: 'restore-deps-cache'

  # Step 3: Install dependencies with caching
  - name: 'node:20-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "📦 Installing dependencies with caching..."
        
        # Install pnpm
        npm install -g pnpm
        
        # Set pnpm cache directory
        export PATH="/workspace/.cache/pnpm:$PATH"
        
        # Restore node_modules if cached
        if [ -d "/workspace/.cache/node_modules" ] && [ "$(ls -A /workspace/.cache/node_modules)" ]; then
          echo "🚀 Restoring node_modules from cache..."
          cp -r /workspace/.cache/node_modules/* /workspace/ 2>/dev/null || true
        fi
        
        # Install dependencies (will be fast if cache exists)
        pnpm install --frozen-lockfile --prefer-offline --store-dir /workspace/.cache/pnpm
        
        # Build shared package
        echo "🔨 Building shared package..."
        cd shared && pnpm build
        
        echo "✅ Dependencies installed and shared built"
    id: 'install-deps'
    waitFor: ['restore-deps-cache']

  # Step 4: Build server and web in parallel with enhanced Docker caching
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-server:latest'
      - '-f'
      - './server/Dockerfile.production'
      - '--build-arg'
      - 'NODE_ENV=production'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/vssyl-server:latest'
      - '--build-arg'
      - 'BUILDKIT_INLINE_CACHE=1'
      - '.'
    id: 'build-server'
    waitFor: ['install-deps', 'pull-cache']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/vssyl-web:latest'
      - '-f'
      - './web/Dockerfile.production'
      - '--build-arg'
      - 'NODE_ENV=production'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/vssyl-web:latest'
      - '--build-arg'
      - 'BUILDKIT_INLINE_CACHE=1'
      - '.'
    id: 'build-web'
    waitFor: ['install-deps', 'pull-cache']

  # Step 5: Save dependency cache to Cloud Storage (parallel with push)
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "💾 Saving cache for next build..."
        
        # Save pnpm cache
        if [ -d "/workspace/.cache/pnpm" ] && [ "$(ls -A /workspace/.cache/pnpm)" ]; then
          gsutil -m cp -r /workspace/.cache/pnpm/* gs://$PROJECT_ID-build-cache/pnpm-cache/ 2>/dev/null || true
        fi
        
        # Save node_modules
        if [ -d "/workspace/node_modules" ] && [ "$(ls -A /workspace/node_modules)" ]; then
          gsutil -m cp -r /workspace/node_modules gs://$PROJECT_ID-build-cache/node_modules/ 2>/dev/null || true
        fi
        
        echo "✅ Cache saved for next build"
    id: 'save-cache'
    waitFor: ['install-deps']

  # Step 6: Push images in parallel
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID']
    id: 'push-server'
    waitFor: ['build-server']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-server:latest']
    id: 'push-server-latest'
    waitFor: ['build-server']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID']
    id: 'push-web'
    waitFor: ['build-web']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vssyl-web:latest']
    id: 'push-web-latest'
    waitFor: ['build-web']

  # Step 3: Deploy services in parallel
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'vssyl-server'
      - '--image'
      - 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '5000'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '10'
      - '--add-cloudsql-instances'
      - 'vssyl-472202:us-central1:vssyl-db'
      - '--vpc-egress'
      - 'all-traffic'
      - '--network'
      - 'default'
      - '--subnet'
      - 'default'
      - '--set-env-vars'
      - 'NODE_ENV=production,DATABASE_URL=postgresql://vssyl_user:Arthur%26George116%21%21@172.30.0.4:5432/vssyl_production?connection_limit=20&pool_timeout=20,DIRECT_URL=postgresql://vssyl_user:Arthur%26George116%21%21@172.30.0.4:5432/vssyl_production?connection_limit=20&pool_timeout=20,JWT_SECRET=OhTXx5RiJu1YOzqGta56ZnN9tTap29sVlvOQMUnGGiI=,JWT_REFRESH_SECRET=/NkIB2sn75WZyqsWOmevzv1wgn9zHuFgmi9x8DTmVG4=,FRONTEND_URL=https://vssyl.com,NEXT_PUBLIC_APP_URL=https://vssyl.com,SMTP_HOST=smtp.gmail.com,SMTP_PORT=587,SMTP_SECURE=false'  
      - '--set-secrets'
      - 'SMTP_USER=smtp-user:latest,SMTP_PASS=smtp-pass:latest,SMTP_FROM=smtp-from:latest'
    id: 'deploy-server'
    waitFor: ['push-server', 'push-server-latest']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'vssyl-web'
      - '--image'
      - 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--max-instances'
      - '20'
      - '--set-env-vars'
      - 'NODE_ENV=production,NEXTAUTH_URL=https://vssyl.com,NEXTAUTH_SECRET=OhTXx5RiJu1YOzqGta56ZnN9tTap29sVlvOQMUnGGiI=,NEXT_PUBLIC_API_URL=https://vssyl-server-235369681725.us-central1.run.app,NEXT_PUBLIC_API_BASE_URL=https://vssyl-server-235369681725.us-central1.run.app,NEXT_PUBLIC_APP_URL=https://vssyl.com,BACKEND_URL=https://vssyl-server-235369681725.us-central1.run.app'                   
    id: 'deploy-web'
    waitFor: ['push-web', 'push-web-latest']

# Store images in Google Container Registry
images:
  - 'gcr.io/$PROJECT_ID/vssyl-server:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/vssyl-server:latest'
  - 'gcr.io/$PROJECT_ID/vssyl-web:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/vssyl-web:latest'

# Build options optimized for caching
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '100'
  logging: CLOUD_LOGGING_ONLY
  # Enable Docker layer caching and buildkit
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true
  # Enable Docker buildkit for better caching
  env:
    - 'DOCKER_BUILDKIT=1'

# Timeout (first build may take longer, subsequent builds will be much faster)
timeout: '1200s'